// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "app/generated/prisma/client"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Day {
  Mon
  Tue
  Wed
  Thu
  Fri
  Sat
  Sun
}

// enum MembershipTier {
//   BRONZE
//   SILVER
//   GOLD
//   PLATINUM
// }

enum AddressType {
  HOME
  WORK
  OTHER
}

enum UserStatus {
  ACTIVE
  INACTIVE
  BANNED
}

enum OrderStatus {
  PENDING
  CONFIRMED
  DISPATCHED
  DELIVERED
  CANCELLED
}

enum OrderType {
  PICKUP
  DINEIN
  DELIVERY
}

enum PaymentType {
  MOBILE_PAYMENT
  COD
  CARD_PAYMENT
}

enum PaymentStatus {
  UNPAID
  PAID
  REFUNDED
}

enum Role {
  CUSTOMER
  RIDER
  ADMIN
}

model Category {
  id       Int       @id @default(autoincrement())
  name     String
  slug     String    @unique
  order    Int
  status   Boolean
  products Product[]

  @@map("categories")
}

model Product {
  id                 Int        @id @default(autoincrement())
  name               String
  slug               String     @unique
  description        String?
  regularPrice       Float
  discountPercentage Float? // Optional: 0 to 100
  isFeatured         Boolean    @default(false)
  isPopular          Boolean    @default(false)
  isOptional         Boolean    @default(false) // For Optional Products
  status             Boolean    @default(true)
  image              String? // Optional image URL/path
  categoryId         Int
  category           Category   @relation(fields: [categoryId], references: [id])
  variants           Variant[] // Optional relation (can be empty array)
  dealItems          DealItem[] // Optional relation (can be empty array)
  // Many-to-many self-relation (optional items shared between products)
  optionalItems      Product[]  @relation("OptionalItems")
  usedInProducts     Product[]  @relation("OptionalItems")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("products")
}

model Variant {
  id        Int     @id @default(autoincrement())
  name      String // e.g., "Regular", "Large"
  price     Float
  productId Int
  product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)

  orderItems         OrderItem[]
  // Many-to-many relation back to OrderItem (optional items)
  optionalOrderItems OrderItem[] @relation("OrderItemOptionalItems")

  @@map("product_variants")
}

model Deal {
  id           Int     @id @default(autoincrement())
  name         String
  regularPrice Float?
  offerPrice   Float?
  description  String?
  isFeatured   Boolean @default(false)
  image        String?
  status       Boolean @default(true)

  availableFrom  String? // e.g., "10:00"
  availableUntil String? // e.g., "22:00"
  startDate      DateTime?
  endDate        DateTime?

  availableDays Day[] // enum-based days of the week âœ…

  dealItems DealItem[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("deals")
}

model DealItem {
  id        Int     @id @default(autoincrement())
  productId Int
  product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)
  quantity  Int
  note      String?
  dealId    Int
  deal      Deal    @relation(fields: [dealId], references: [id], onDelete: Cascade)

  @@map("deal_items")
}

model Customer {
  id           Int        @id @default(autoincrement())
  customerCode String     @unique // e.g., CUST-2451
  fullName     String
  email        String     @unique
  phone        String
  joinedAt     DateTime   @default(now())
  // membershipTier MembershipTier @default(BRONZE)
  points       Int        @default(0)
  about        String? // Optional
  status       UserStatus @default(ACTIVE)
  image        String?

  userId Int?  @unique
  user   User? @relation(fields: [userId], references: [id])

  orders    Order[] // Relation to Order
  addresses Address[] // Relation to Address

  @@map("customers")
}

model Order {
  id            Int           @id @default(autoincrement())
  customer      Customer      @relation(fields: [customerId], references: [id], onDelete: Cascade)
  customerId    Int
  rider         Rider?        @relation(fields: [riderId], references: [id])
  riderId       Int?
  total         Float
  subtotal      Float
  deliveryFee   Float         @default(0)
  tax           Float         @default(0)
  tip           Float         @default(0)
  status        OrderStatus   @default(PENDING)
  paymentMethod PaymentType // e.g., "Card (**** 1234)"
  paymentStatus PaymentStatus @default(UNPAID)
  createdAt     DateTime      @default(now())
  orderType     OrderType     @default(DELIVERY)
  deliveryNote  String?
  // address       Address?    @relation(fields: [addressId], references: [id])
  // addressId     Int?
  address       String?
  latitude      Float?
  longitude     Float?

  items OrderItem[]

  timeline OrderTimeline[]

  @@map("orders")
}

model OrderItem {
  id                 Int       @id @default(autoincrement())
  order              Order     @relation(fields: [orderId], references: [id], onDelete: Cascade)
  orderId            Int
  variant            Variant?  @relation(fields: [variantId], references: [id])
  variantId          Int?
  quantity           Int
  unitPrice          Float // Regular Price - (Discount Percentage applied)
  price              Float // unitPrice * quantity
  note               String? // Optional note (e.g., spicy, no onions)
  regularPrice       Float
  discountPercentage Float
  // Many-to-many relation for optional items (variants)
  optionalItems      Variant[] @relation("OrderItemOptionalItems")

  @@map("order_items")
}

model OrderTimeline {
  id        Int      @id @default(autoincrement())
  order     Order    @relation(fields: [orderId], references: [id], onDelete: Cascade)
  orderId   Int
  status    String // e.g., "Order Placed", "Payment Received"
  timestamp DateTime @default(now())

  @@map("order_timeline")
}

model Address {
  id            Int         @id @default(autoincrement())
  customer      Customer    @relation(fields: [customerId], references: [id], onDelete: Cascade)
  customerId    Int
  type          AddressType
  street        String
  city          String
  state         String
  postalCode    String
  isDefault     Boolean     @default(false)
  deliveryNotes String? // Optional
  pinLocation   String // Hidden from user, used internally

  @@map("addresses")
}

model User {
  id            Int       @id @default(autoincrement())
  password      String?
  role          Role      @default(CUSTOMER)
  emailVerified DateTime?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  // Relations to profiles
  customer Customer?
  rider    Rider?
  admin    Admin?

  sessions Session[]
  accounts Account[]
}

// ---------------------------
// RIDER MODEL
// ---------------------------
model Rider {
  id        Int        @id @default(autoincrement())
  riderCode String     @unique // e.g., RID-001
  fullName  String
  email     String     @unique
  phone     String
  joinedAt  DateTime   @default(now())
  status    UserStatus @default(ACTIVE)
  image     String?

  userId Int  @unique
  user   User @relation(fields: [userId], references: [id])

  // Optional: Relation to orders this rider delivers
  orders Order[]

  @@map("riders")
}

// ---------------------------
// ADMIN MODEL
// ---------------------------
model Admin {
  id        Int        @id @default(autoincrement())
  adminCode String     @unique // e.g., ADM-001
  fullName  String
  email     String     @unique
  phone     String
  joinedAt  DateTime   @default(now())
  status    UserStatus @default(ACTIVE)
  image     String?

  userId Int  @unique
  user   User @relation(fields: [userId], references: [id])

  @@map("admins")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       Int
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  expires      DateTime
}

model Account {
  id                String  @id @default(cuid())
  userId            Int
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  @@unique([provider, providerAccountId])
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
